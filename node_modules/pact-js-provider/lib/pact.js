'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.runPact = runPact;

var _es6Promise = require('es6-promise');

var _rubyVerifier = require('./rubyVerifier');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _mocha = require('mocha');

var _mocha2 = _interopRequireDefault(_mocha);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pact_dsl = require('./pact_dsl');

var _pact_dsl2 = _interopRequireDefault(_pact_dsl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function onFailure(failures) {
  process.on('exit', function () {
    process.exit(failures);
  });
}

function runPact() {
  var mocha = new _mocha2.default({
    ui: 'pact_dsl'
  });

  for (var _len = arguments.length, tests = Array(_len), _key = 0; _key < _len; _key++) {
    tests[_key] = arguments[_key];
  }

  (0, _lodash2.default)(tests).forEach(function (test) {
    mocha.addFile(test);
  });
  mocha.run(onFailure);
}

var Pact = function () {
  function Pact(provider, consumer, options) {
    _classCallCheck(this, Pact);

    this.provider = provider;
    this.consumer = consumer;
    this.options = options;
  }

  _createClass(Pact, [{
    key: 'providerState',
    value: function providerState(stateName) {
      _logger2.default.debug('Running provider state ' + stateName);
      _logger2.default.debug('Test', this.consumer);
      return (0, _rubyVerifier.rakeVerify)(this.consumer, stateName, this.options);
    }
  }]);

  return Pact;
}();

exports.default = Pact;