'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mocha = require('mocha');

var _mocha2 = _interopRequireDefault(_mocha);

var _suite = require('mocha/lib/suite');

var _suite2 = _interopRequireDefault(_suite);

var _test = require('mocha/lib/test');

var _test2 = _interopRequireDefault(_test);

var _pact = require('./pact');

var _pact2 = _interopRequireDefault(_pact);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _mocha2.default.interfaces['pact_dsl'] = function (suite) {
  var suites = [suite];
  var pact = null;
  var currentProviderState = null;

  suite.on('pre-require', function (context, file, mocha) {
    var common = require('mocha/lib/interfaces/common')([suite], context);

    context.run = mocha.options.delay && common.runWithSuite(suite);

    context.provider_states_for = function (provider, consumer, pactFile, url, fn) {
      var suite = _suite2.default.create(suites[0], provider);
      var options = {};
      options.pactUrl = pactFile;
      options.baseUrl = url;
      pact = new _pact2.default(provider, consumer, options);
      suite.file = file;
      suites.unshift(suite);

      fn.call(suite);

      suites.shift();
      return suite;
    };

    context.providerState = function (providerState, fn) {
      var suite = _suite2.default.create(suites[0], providerState);
      suites.unshift(suite);
      currentProviderState = providerState;

      fn.call(suite);
      suites.shift();
      return suite;
    };

    context.setUp = function (fn) {
      suites[0].beforeEach(fn);
    };
    context.tearDown = function (fn) {
      suites[0].afterEach(fn);
    };

    context.it = function (fn) {
      var suite = suites[0];
      var test = new _test2.default(pact.provider, pact.providerState.bind(pact, currentProviderState));
      suite.addTest(test);

      return test;
    };

    /**
     * Describes a specification or test-case with the given `title`
     * and callback `fn` acting as a thunk.
     */
    context.test = function (title, fn) {
      var test = new _test2.default(title, fn);
      test.file = file;
      suite.addTest(test);

      return test;
    };
  });
};